{"version":3,"sources":["create-account-form.tsx"],"names":["validation_1","require","React","react_hook_form_1","form_1","input_1","button_1","react_pin_input_1","zod_1","axios_1","use_toast_1","CreateAccountForm","_a","uid","setOpen","form","useForm","resolver","zodResolver","createAccountSchema","defaultValues","name","pin","isSubmitting","formState","createElement","Fragment","className","Form","__assign","onSubmit","handleSubmit","values","post","sent","data","success","reset","toast","title","description","variant","FormField","control","render","field","FormItem","FormLabel","FormControl","Input","autoComplete","disabled","FormDescription","FormMessage","length","initialValue","value","secret","secretDelay","onChange","type","inputMode","style","display","gridTemplateColumns","gap","inputStyle","borderColor","height","width","fontSize","inputFocusStyle","autoSelect","Button","exports"],"mappings":"2qDAAA,IAAAA,aAAAC,QAAA,oBACAC,MAAAD,QAAA,SACAE,kBAAAF,QAAA,mBACAG,OAAAH,QAAA,wBACAI,QAAAJ,QAAA,yBACAK,SAAAL,QAAA,gBACAM,kBAAAN,QAAA,mBAEAO,MAAAP,QAAA,2BACAQ,QAAAR,QAAA,SAEAS,YAAAT,QAAA,6BAOMU,kBAAoB,SAACC,OAAEC,EAAAD,EAAAC,IAAKC,EAAAF,EAAAE,QAC1BC,EAAOZ,kBAAAa,QAA6C,CACxDC,SAAUT,MAAAU,YAAYlB,aAAAmB,qBACtBC,cAAe,CAAEC,KAAM,GAAIC,IAAK,MAE1BC,EAAAR,EAAAS,UAAAD,aAoBR,OACErB,MAAAuB,cAAAvB,MAAAwB,SAAA,KACExB,MAAAuB,cAAA,KAAA,CAAIE,UAAU,6CAA2C,uBAGzDzB,MAAAuB,cAAA,MAAA,CAAKE,UAAU,oDACfzB,MAAAuB,cAACrB,OAAAwB,KAAIC,SAAA,GAAKd,GACRb,MAAAuB,cAAA,OAAA,CAAMK,SAAUf,EAAKgB,aA1B3B,SAAwBC,6GAEH,6BAAA,CAAA,EAAMvB,QAAA,QAAMwB,KAAsB,qBAAoBJ,SAAAA,SAAA,GAAMG,GAAM,CAAEnB,IAAGA,aACxF,OADiBD,EAAAsB,OAAyEC,KAClFC,SACNtB,GAAQ,GACRC,EAAKsB,QACL,CAAA,EAAO3B,YAAA4B,MAAM,CACXC,MAAO,+BACPC,YAAa,8DAIjB,gBAAA,CAAA,EAAO9B,YAAA4B,MAAM,CACXC,MAAO,QACPC,YAAa,gDACbC,QAAS,yCAWoCd,UAAU,aACrDzB,MAAAuB,cAACrB,OAAAsC,UAAS,CACRC,QAAS5B,EAAK4B,QACdtB,KAAM,OACNuB,OAAQ,SAAChC,OAAEiC,EAAAjC,EAAAiC,MAAY,OACrB3C,MAAAuB,cAACrB,OAAA0C,SAAQ,KACP5C,MAAAuB,cAACrB,OAAA2C,UAAS,KAAA,QACV7C,MAAAuB,cAACrB,OAAA4C,YAAW,KACV9C,MAAAuB,cAACpB,QAAA4C,MAAKpB,SAAA,GACAgB,EAAK,CACTK,aAAc,MACdvB,UAAW,WACXwB,SAAU5B,MAGdrB,MAAAuB,cAACrB,OAAAgD,gBAAe,KAAA,4CAGhBlD,MAAAuB,cAACrB,OAAAiD,YAAW,CAAC1B,UAAU,qBAI7BzB,MAAAuB,cAACrB,OAAAsC,UAAS,CACRC,QAAS5B,EAAK4B,QACdtB,KAAM,MACNuB,OAAQ,SAAChC,OAAEiC,EAAAjC,EAAAiC,MAAY,OACrB3C,MAAAuB,cAACrB,OAAA0C,SAAQ,KACP5C,MAAAuB,cAACrB,OAAA2C,UAAS,KAAA,YACV7C,MAAAuB,cAACrB,OAAA4C,YAAW,KACV9C,MAAAuB,cAAClB,kBAAA,QAAQ,CACP+C,OAAQ,EACRC,aAAcV,EAAMW,MACpBC,QAAM,EACNN,SAAU5B,EACVmC,YAAa,IACbC,SAAU,SAACH,GAAU,OAAAX,EAAMc,SAASH,IACpCI,KAAK,UACLC,UAAU,SACVC,MAAO,CACLC,QAAS,OACTC,oBAAqB,iBACrBC,IAAK,QAEPC,WAAY,CACVC,YAAa,uBACbC,OAAQ,OACRC,MAAO,OACPC,SAAU,QAEZC,gBAAiB,CAAEJ,YAAa,uBAChCK,YAAY,KAGhBtE,MAAAuB,cAACrB,OAAAgD,gBAAe,KAAA,2CAGhBlD,MAAAuB,cAACrB,OAAAiD,YAAW,CAAC1B,UAAU,qBAI7BzB,MAAAuB,cAACnB,SAAAmE,OAAM,CACL9C,UAAU,gGACVwB,SAAU5B,GAAY,sBAUlCmD,QAAA,QAAe/D","file":"create-account-form.min.js","sourcesContent":["import { createAccountSchema } from '@/lib/validation';\nimport * as React from 'react';\nimport {useForm} from 'react-hook-form';\nimport {Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage} from '@/components/ui/form';\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from '../ui/button';\nimport PinInput from 'react-pin-input';\nimport * as z from \"zod\";\nimport {zodResolver} from \"@hookform/resolvers/zod\"\nimport axios from 'axios';\nimport { AccountResponse } from '@/types';\nimport { toast } from '@/components/ui/use-toast';\n\n\ninterface Props{\n  uid: string;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n}\nconst CreateAccountForm = ({ uid, setOpen}: Props) => {\n  const form = useForm<z.infer<typeof createAccountSchema>>({\n    resolver: zodResolver(createAccountSchema),\n    defaultValues: { name: \"\", pin: \"\" },\n  });\n  const { isSubmitting } = form.formState;\n  async function onSubmit(values: z.infer<typeof createAccountSchema>) {\n    try {\n      const { data } = await axios.post<AccountResponse>(\"/api/createAccount\", {...values, uid});\n      if(data.success) {\n        setOpen(false)\n        form.reset()\n        return toast({\n          title: \"Account created successfully\",\n          description: \"Your account has been created successfully\",\n        });\n      }\n    } catch (e) {\n      return toast({\n        title: \"Error\",\n        description: \"An error occurred while creating your account\",\n        variant: \"destructive\",\n      })\n    }\n  }\n  return (\n    <>\n      <h1 className=\"text-white text-center font-bold text-3xl\">\n        Create your account\n      </h1>\n      <div className=\"w-full h-[2px] bg-slate-500/20 mb-4 color-white\" />\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-3\">\n          <FormField\n            control={form.control}\n            name={\"name\"}\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Name</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    autoComplete={\"off\"}\n                    className={\"h-[56px]\"}\n                    disabled={isSubmitting}\n                  />\n                </FormControl>\n                <FormDescription>\n                  Your name is used identify your account.\n                </FormDescription>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name={\"pin\"}\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>PIN Code</FormLabel>\n                <FormControl>\n                  <PinInput\n                    length={4}\n                    initialValue={field.value}\n                    secret\n                    disabled={isSubmitting}\n                    secretDelay={100}\n                    onChange={(value) => field.onChange(value)}\n                    type=\"numeric\"\n                    inputMode=\"number\"\n                    style={{\n                      display: \"grid\",\n                      gridTemplateColumns: \"repeat(4, 1fr)\",\n                      gap: \"10px\",\n                    }}\n                    inputStyle={{\n                      borderColor: \"RGBA(255, 255, 0.16)\",\n                      height: \"56px\",\n                      width: \"100%\",\n                      fontSize: \"40px\",\n                    }}\n                    inputFocusStyle={{ borderColor: \"RGBA(255, 255, 0.80\" }}\n                    autoSelect={true}\n                  />\n                </FormControl>\n                <FormDescription>\n                  Your pin is used identify your account.\n                </FormDescription>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n          <Button\n            className=\"w-full bg-red-600 hover:bg-red-700 flex justify-center items-center h-[56px] !text-white mt-4\"\n            disabled={isSubmitting}\n          >\n            Create account\n          </Button>\n        </form>\n      </Form>\n    </>\n  );\n};\n\nexport default CreateAccountForm;"]}